window.top.DEBUG = localStorage.getItem('DEBUG') == true
//window.top.DEBUG = true;

// Function to populate the "All Projects" dropdown with A-Z filtering
function populateProjectDropdown(projects) {
  const dropdownContent = document.getElementById("projectDropdown");
  dropdownContent.innerHTML = ""; // Clear existing content

  // Sort projects alphabetically by name
  const sortedProjects = projects.sort((a, b) => a.name.localeCompare(b.name));

  sortedProjects.forEach((project) => {
    const projectLink = document.createElement("a");
    projectLink.href = "#"; // Prevent default navigation
    projectLink.textContent = project.name;

    // Add click event to open the project
    projectLink.addEventListener("click", (event) => {
      event.preventDefault(); // Prevent default link behavior
      localStorage.setItem("projectId", project._id); // Save the project ID to localStorage
      const windowIframe = window.parent.document.getElementById("window");
      windowIframe.src = "components/window/window.html"; // Navigate to the project workspace
    });

    dropdownContent.appendChild(projectLink);
  });
}


async function initProjects() {
  const date = new Date();

  const projectTemplate = {                 // There is no id. It is automatically generated by PouchDB. This will be each related child's projectId.
    name: "NewWorldMain",                   // Name of the project. This will also be the name of the root folder.
    type: "folder",                         // Root projects are always folders. Children must be either folders or files.
    parentId: null,                         // Project roots have no parent. All related children must have a parent.
    image: "dog.jpg",                       // Just the name and extension of the image. ../../assets/images/'image' is already included when getting path.
    description: "This is a test project",  // Description of the project that is shown on the project list.
    childrenIds: [                          // Immediate children of the root project.
      "file1-0987654321",
      "Characters-1234123412"
    ],
    date: {                                 
      created: date,                        // Date when the project was created.
      last: date                            // Date when the project was last updated.
    }
  }
  
  window.top.db.createIndex({
    index: {
      fields: ['parentId', 'type']
    }
  })
  
  if (window.top.DEBUG) console.log('üõ† [1] Fetching projects...');
  const projects = await window.top.db.find({
    selector: {
      parentId: null,
      type: 'folder'
    }
  })
  .then(result => {
    if (window.top.DEBUG) console.log(`‚úÖ [1] Fetched ${result.length} project${result.length === 1 ? '' : 's'}:`, result);
    return result;
  })
  .catch(error => {
    if (window.top.DEBUG) console.log("‚ùå [1] Couldn't fetch projects:", error);
    window.top.notify('error', "Couldn't fetch projects");
  })

  const project_gallery = document.getElementById('projectGallery');

  for (const project of projects) {
    const card = document.createElement('div');
    card.className = 'project-card';

    // Check if the image is a data URL or a file path
    const imageUrl = project.image.startsWith('data:') 
      ? project.image // Use the data URL directly
      : `../../assets/images/${project.image}`; // Construct the file path for regular images

    card.innerHTML = `
      <div class="template-image" style="background-image: url('${imageUrl}');"></div>
      <div class="template-title">${project.name}</div>
      <div class="template-description">${project.description}</div>

      <div class="toolbar">
        <div class="button-rack">
          <button title="Open ${project.name}" class="btn-open">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M88.7 223.8L0 375.8 0 96C0 60.7 28.7 32 64 32l117.5 0c17 0 33.3 6.7 45.3 18.7l26.5 26.5c12 12 28.3 18.7 45.3 18.7L416 96c35.3 0 64 28.7 64 64l0 32-336 0c-22.8 0-43.8 12.1-55.3 31.8zm27.6 16.1C122.1 230 132.6 224 144 224l400 0c11.5 0 22 6.1 27.7 16.1s5.7 22.2-.1 32.1l-112 192C453.9 474 443.4 480 432 480L32 480c-11.5 0-22-6.1-27.7-16.1s-5.7-22.2 .1-32.1l112-192z"/></svg>
          </button>
          <button title="About ${project.name}" class="btn-info">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path d="M48 80a48 48 0 1 1 96 0A48 48 0 1 1 48 80zM0 224c0-17.7 14.3-32 32-32l64 0c17.7 0 32 14.3 32 32l0 224 32 0c17.7 0 32 14.3 32 32s-14.3 32-32 32L32 512c-17.7 0-32-14.3-32-32s14.3-32 32-32l32 0 0-192-32 0c-17.7 0-32-14.3-32-32z"/></svg>
          </button>
          <button title="Change Image for ${project.name}" class="btn-change-image">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
              <path d="M464 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48zM128 192c-17.67 0-32 14.33-32 32s14.33 32 32 32 32-14.33 32-32-14.33-32-32-32zm320 160L352 288l-96 128H64l128-160 96 128 64-96 96 128z"/>
            </svg>
          </button>
          <button title="Rename Project Title for ${project.name}" class="btn-rename-title">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><path d="M.1 29.3C-1.4 47 11.7 62.4 29.3 63.9l8 .7C70.5 67.3 96 95 96 128.3L96 224l-32 0c-17.7 0-32 14.3-32 32s14.3 32 32 32l32 0 0 95.7c0 33.3-25.5 61-58.7 63.8l-8 .7C11.7 449.6-1.4 465 .1 482.7s16.9 30.7 34.5 29.2l8-.7c34.1-2.8 64.2-18.9 85.4-42.9c21.2 24 51.2 40 85.4 42.9l8 .7c17.6 1.5 33.1-11.6 34.5-29.2s-11.6-33.1-29.2-34.5l-8-.7C185.5 444.7 160 417 160 383.7l0-95.7 32 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-32 0 0-95.7c0-33.3 25.5-61 58.7-63.8l8-.7c17.6-1.5 30.7-16.9 29.2-34.5S239-1.4 221.3 .1l-8 .7C179.2 3.6 149.2 19.7 128 43.7c-21.2-24-51.2-40-85.4-42.9l-8-.7C17-1.4 1.6 11.7 .1 29.3z"/></svg>  
          </button>
          <button title="Rename Description for ${project.name}" class="btn-rename-description">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
              <path d="M290.74 93.24a32 32 0 0 0-45.25 0l-224 224a32 32 0 0 0-8.19 13.7L.06 482.3a16 16 0 0 0 19.64 19.64l151.36-13.24a32 32 0 0 0 13.7-8.19l224-224a32 32 0 0 0 0-45.25ZM124.12 422.06l-92.18 8.06 8.06-92.18 176-176 84.12 84.12ZM478.33 33.67a96 96 0 0 0-135.66 0l-56.56 56.56 135.66 135.66 56.56-56.56a96 96 0 0 0 0-135.66ZM403.88 108.12l-84.12-84.12 33.94-33.94a64 64 0 0 1 90.5 90.5Z"/>
            </svg>
          </button>
          <button title="Duplicate ${project.name}" class="btn-duplicate">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M288 448L64 448l0-224 64 0 0-64-64 0c-35.3 0-64 28.7-64 64L0 448c0 35.3 28.7 64 64 64l224 0c35.3 0 64-28.7 64-64l0-64-64 0 0 64zm-64-96l224 0c35.3 0 64-28.7 64-64l0-224c0-35.3-28.7-64-64-64L224 0c-35.3 0-64 28.7-64 64l0 224c0 35.3 28.7 64 64 64z"/></svg>
          </button>
          <button title="Delete ${project.name}" class="btn-delete">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M135.2 17.7L128 32 32 32C14.3 32 0 46.3 0 64S14.3 96 32 96l384 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-96 0-7.2-14.3C307.4 6.8 296.3 0 284.2 0L163.8 0c-12.1 0-23.2 6.8-28.6 17.7zM416 128L32 128 53.2 467c1.6 25.3 22.6 45 47.9 45l245.8 0c25.3 0 46.3-19.7 47.9-45L416 128z"/></svg>
          </button>
        </div>

        <div class="delete-confirmation">
          <p>Confirm?</p>
            <button title="Cancel Deletion" class="btn-delete-cancel">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M367.2 412.5L99.5 144.8C77.1 176.1 64 214.5 64 256c0 106 86 192 192 192c41.5 0 79.9-13.1 111.2-35.5zm45.3-45.3C434.9 335.9 448 297.5 448 256c0-106-86-192-192-192c-41.5 0-79.9 13.1-111.2 35.5L412.5 367.2zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256z"/></svg>
            </button>
        </div>
      </div>
    `;
    card.setAttribute('projectId', project._id);

    card.onclick = () => {
      localStorage.setItem('projectId', project._id);
      const windowIframe = window.parent.document.getElementById('window');
      windowIframe.src = 'components/window/window.html';
    };
    project_gallery.appendChild(card);

    // Button
    const toolbar = card.querySelector('.toolbar')
    const openButton = card.querySelector('.btn-open');
    const infoButton = card.querySelector('.btn-info');
    const renameButton = card.querySelector('.btn-rename-title');
    const duplicateButton = card.querySelector('.btn-duplicate');
    const deleteButton = card.querySelector('.btn-delete');
    const changeImageButton = card.querySelector('.btn-change-image');
    const renameDescriptionButton = card.querySelector('.btn-rename-description');

    // Delete Confirmation div
    const confirmation = card.querySelector('.delete-confirmation');

    // Button drop animations
    function dropButtons(buttons, amount) {
      for (const button of buttons) {
        setTimeout(() => {
          button.style.transform = `translateY(${amount}) rotateZ(${Math.floor(Math.random() * 721) - 360}deg)`
        }, Math.floor(Math.random() * 200))
      }
    }

    function unDropButtons(buttons) {
      for (const button of buttons) {
        setTimeout(() => {
          button.style.transform = `translateY(0rem)`
        }, Math.floor(Math.random() * 200))
      }
    }

    // Button click events

    // Lobotomize toolbar
		toolbar.addEventListener('click', async (event) => {
			event.stopPropagation();
		})

    // Helper function to show notifications
    function showNotification(message, type = 'error') {
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.textContent = message;

      document.body.appendChild(notification);

      // Automatically remove the notification after 3 seconds
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }

    // Open
    openButton.addEventListener('click', async (event) => {
      event.stopPropagation(); // Prevent triggering the card's onclick event

      try {
        if (window.top.DEBUG) console.log(`üõ† [5] Opening project "${project.name}"...`);
        localStorage.setItem('projectId', project._id); // Save the project ID to localStorage
        const windowIframe = window.parent.document.getElementById('window');
        windowIframe.src = 'components/window/window.html'; // Navigate to the project workspace
        if (window.top.DEBUG) console.log(`‚úÖ [5] Project "${project.name}" opened.`);
      } catch (error) {
        if (window.top.DEBUG) console.error("Error opening project:", error);
        showNotification("Couldn't open the project. Please try again.");
      }
    });

    // Info
    infoButton.addEventListener('click', (event) => {
      event.stopPropagation(); // Prevent triggering the card's onclick event

      try {
        if (window.top.DEBUG) console.log(`üõ† [6] Displaying info for project "${project.name}"...`);

        // Create a modal for displaying project info
        const modal = document.createElement('div');
        modal.className = 'info-modal';
        modal.innerHTML = `
          <div class="info-modal-content">
            <h3>Project Info</h3>
            <p><strong>Project Name:</strong> ${project.name}</p>
            <p><strong>Description:</strong> ${project.description}</p>
            <p><strong>Created:</strong> ${new Date(project.date.created).toLocaleString()}</p>
            <p><strong>Last Updated:</strong> ${new Date(project.date.last).toLocaleString()}</p>
            <button class="info-close">Close</button>
          </div>
        `;
        document.body.appendChild(modal);

        const closeButton = modal.querySelector('.info-close');

        // Close button logic
        closeButton.addEventListener('click', () => {
          document.body.removeChild(modal);
        });

        if (window.top.DEBUG) console.log(`‚úÖ [6] Info displayed for project "${project.name}".`);
      } catch (error) {
        if (window.top.DEBUG) console.error("Error displaying project info:", error);
        showNotification("Couldn't display project info. Please try again.");
      }
    });

    // Rename
    renameButton.addEventListener('click', async (event) => {
      event.stopPropagation(); // Prevent triggering the card's onclick event

      const titleElement = card.querySelector('.template-title');
      const currentName = titleElement.textContent;

      // Create a modal for renaming
      const modal = document.createElement('div');
      modal.className = 'rename-modal';
      modal.innerHTML = `
        <div class="rename-modal-content">
          <h3>Rename Project</h3>
          <input type="text" class="rename-input" value="${currentName}" />
          <div class="rename-modal-actions">
            <button class="rename-cancel">Cancel</button>
            <button class="rename-confirm">Rename</button>
          </div>
        </div>
      `;
      document.body.appendChild(modal);

      const input = modal.querySelector('.rename-input');
      const cancelButton = modal.querySelector('.rename-cancel');
      const confirmButton = modal.querySelector('.rename-confirm');

      // Focus on the input field
      input.focus();

      // Cancel button logic
      cancelButton.addEventListener('click', () => {
        document.body.removeChild(modal);
      });

      // Confirm button logic
      confirmButton.addEventListener('click', async () => {
        const newName = input.value.trim();
      
        if (!newName || newName === currentName) {
          document.body.removeChild(modal);
          return;
        }
      
        try {
          // Fetch the latest version of the project to avoid conflicts
          const latestProject = await window.top.db.get(project._id);
    
          // Update the project with the new name
          const updatedProject = {
            ...latestProject,
            name: newName,
            date: {
              ...latestProject.date,
              last: new Date(), // Update the last updated date
            },
          };
          await window.top.db.put(updatedProject); // Save to the database
    
          // Update the UI
          titleElement.textContent = newName;
          showNotification(`Project renamed to "${newName}"`, 'success');
          if (window.top.DEBUG) console.log(`‚úÖ [7] Project renamed to "${newName}".`);
        } catch (error) {
          console.error("Couldn't rename project:", error);
          showNotification("Couldn't rename project. Please try again.", 'error');
        } finally {
          // Ensure the modal is removed
          if (document.body.contains(modal)) {
            document.body.removeChild(modal);
          }
        }
      });
    });

    // Change Image
    changeImageButton.addEventListener('click', async (event) => {
      event.stopPropagation(); // Prevent triggering the card's onclick event

      // Create a file input element
      const fileInput = document.createElement('input');
      fileInput.type = 'file';
      fileInput.accept = 'image/*'; // Accept only image files

      // Trigger the file input dialog
      fileInput.click();

      // Handle file selection
      fileInput.addEventListener('change', async () => {
        const file = fileInput.files[0];
        if (!file) return;

        try {
          if (window.top.DEBUG) console.log(`üõ† [7] Changing image for project "${project.name}"...`);

          // Use FileReader to read the image file as a data URL
          const reader = new FileReader();
          reader.onload = () => {
            // Update the UI with the selected image
            const imageElement = card.querySelector('.template-image');
            imageElement.style.backgroundImage = `url('${reader.result}')`;

            // Optionally, update the project in the database with the data URL
            const updatedProject = { 
              ...project, 
              image: reader.result, 
              date: { 
                ...project.date, 
                last: new Date() // Update the last updated date
              } 
            };
            window.top.db.put(updatedProject);
            if (window.top.DEBUG) console.log(`‚úÖ [7] Image changed for project "${project.name}".`);
            showNotification(`Image updated successfully for project "${project.name}".`, 'success');
          };

          reader.onerror = () => {
            if (window.top.DEBUG) console.error("Error reading the image file.");
            showNotification("Couldn't read the selected image. Please try again.");
          };

          reader.readAsDataURL(file); // Read the file as a data URL
        } catch (error) {
          if (window.top.DEBUG) console.error("Error changing project image:", error);
          showNotification("Couldn't change the project image. Please try again.");
        }
      });
    });

    // Rename Description
    renameDescriptionButton.addEventListener('click', async (event) => {
      event.stopPropagation(); // Prevent triggering the card's onclick event

      const descriptionElement = card.querySelector('.template-description');
      const currentDescription = descriptionElement.textContent;

      // Create a modal for renaming the description
      const modal = document.createElement('div');
      modal.className = 'rename-modal';
      modal.innerHTML = `
        <div class="rename-modal-content">
          <h3>Rename Description</h3>
          <textarea class="rename-input" rows="4">${currentDescription}</textarea>
          <div class="rename-modal-actions">
            <button class="rename-cancel">Cancel</button>
            <button class="rename-confirm">Rename</button>
          </div>
        </div>
      `;
      document.body.appendChild(modal);

      const input = modal.querySelector('.rename-input');
      const cancelButton = modal.querySelector('.rename-cancel');
      const confirmButton = modal.querySelector('.rename-confirm');

      // Focus on the input field
      input.focus();

      // Cancel button logic
      cancelButton.addEventListener('click', () => {
        document.body.removeChild(modal);
      });

      // Confirm button logic
      confirmButton.addEventListener('click', async () => {
        const newDescription = input.value.trim();
      
        if (!newDescription || newDescription === currentDescription) {
          document.body.removeChild(modal);
          return;
        }
      
        try {
          // Fetch the latest version of the project to avoid conflicts
          const latestProject = await window.top.db.get(project._id);
    
          // Update the project with the new description
          const updatedProject = {
            ...latestProject,
            description: newDescription,
            date: {
              ...latestProject.date,
              last: new Date(), // Update the last updated date
            },
          };
          await window.top.db.put(updatedProject); // Save to the database
    
          // Update the UI
          descriptionElement.textContent = newDescription;
          showNotification(`Description updated to "${newDescription}"`, 'success');
          if (window.top.DEBUG) console.log(`‚úÖ [7] Description updated to "${newDescription}".`);
        } catch (error) {
          console.error("Couldn't update description:", error);
          showNotification("Couldn't update the description. Please try again.", 'error');
        } finally {
          // Ensure the modal is removed
          if (document.body.contains(modal)) {
            document.body.removeChild(modal);
          }
        }
      });
    });

    // Duplicate
    duplicateButton.addEventListener('click', async (event) => {
      event.stopPropagation(); // Prevent triggering the card's onclick event

      try {
        if (!project || !project.name) {
          showNotification("Invalid project data. Cannot duplicate.");
          return;
        }

        if (window.top.DEBUG) console.log(`üõ† [4] Duplicating project "${project.name}"...`);

        // Create a copy of the project with a new ID and updated timestamps
        const { _id, _rev, ...projectData } = project; // Exclude _id and _rev
        const newProject = {
          ...projectData,
          name: `${project.name} (Copy)`, // Append "Copy" to the name
          childrenIds: [], // Initialize with an empty array
          date: {
            created: new Date(),
            last: new Date()
          }
        };

        // Save the new project to the database
        const response = await window.top.db.post(newProject);

        if (response.ok) {
          const newProjectId = response.id; // Get the new project's ID
          if (window.top.DEBUG) console.log(`‚úÖ [4] Project "${project.name}" duplicated successfully with ID "${newProjectId}".`);

          // Fetch and duplicate children
          if (project.childrenIds && project.childrenIds.length > 0) {
            if (window.top.DEBUG) console.log(`üõ† [4] Duplicating children of project "${project.name}"...`);

            const newChildrenIds = [];
            for (const childId of project.childrenIds) {
              if (childId) { // Ensure childId is not null or undefined
                const newChildId = await duplicateChild(childId, newProjectId);
                if (newChildId) {
                  newChildrenIds.push(newChildId);
                }
              }
            }

            // Fetch the latest version of the new project to get its _rev
            const latestNewProject = await window.top.db.get(newProjectId);

            // Update the new project's childrenIds
            const updatedProject = {
              ...latestNewProject, // Include the latest _rev
              childrenIds: newChildrenIds
            };
            await window.top.db.put(updatedProject); // Save the updated project

            const newCard = document.createElement('div');
            newCard.className = 'project-card';
            newCard.setAttribute('projectId', updatedProject._id);
            
            // Check if the image is a data URL or a file path
            const newImageUrl = updatedProject.image.startsWith('data:') 
              ? updatedProject.image // Use the data URL directly
              : `../../assets/images/${updatedProject.image}`; // Construct the file path for regular images
        
            newCard.innerHTML = `
              <div class="template-image" style="background-image: url('${newImageUrl}');"></div>
              <div class="template-title">${updatedProject.name}</div>
              <div class="template-description">${updatedProject.description}</div>
        
              <div class="toolbar">
                <div class="button-rack">
                  <button title="Open ${updatedProject.name}" class="btn-open">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M88.7 223.8L0 375.8 0 96C0 60.7 28.7 32 64 32l117.5 0c17 0 33.3 6.7 45.3 18.7l26.5 26.5c12 12 28.3 18.7 45.3 18.7L416 96c35.3 0 64 28.7 64 64l0 32-336 0c-22.8 0-43.8 12.1-55.3 31.8zm27.6 16.1C122.1 230 132.6 224 144 224l400 0c11.5 0 22 6.1 27.7 16.1s5.7 22.2-.1 32.1l-112 192C453.9 474 443.4 480 432 480L32 480c-11.5 0-22-6.1-27.7-16.1s-5.7-22.2 .1-32.1l112-192z"/></svg>
                  </button>
                  <button title="About ${updatedProject.name}" class="btn-info">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path d="M48 80a48 48 0 1 1 96 0A48 48 0 1 1 48 80zM0 224c0-17.7 14.3-32 32-32l64 0c17.7 0 32 14.3 32 32l0 224 32 0c17.7 0 32 14.3 32 32s-14.3 32-32 32L32 512c-17.7 0-32-14.3-32-32s14.3-32 32-32l32 0 0-192-32 0c-17.7 0-32-14.3-32-32z"/></svg>
                  </button>
                  <button title="Change Image for ${updatedProject.name}" class="btn-change-image">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                      <path d="M464 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48zM128 192c-17.67 0-32 14.33-32 32s14.33 32 32 32 32-14.33 32-32-14.33-32-32-32zm320 160L352 288l-96 128H64l128-160 96 128 64-96 96 128z"/>
                    </svg>
                  </button>
                  <button title="Rename Project Title for ${updatedProject.name}" class="btn-rename-title">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><path d="M.1 29.3C-1.4 47 11.7 62.4 29.3 63.9l8 .7C70.5 67.3 96 95 96 128.3L96 224l-32 0c-17.7 0-32 14.3-32 32s14.3 32 32 32l32 0 0 95.7c0 33.3-25.5 61-58.7 63.8l-8 .7C11.7 449.6-1.4 465 .1 482.7s16.9 30.7 34.5 29.2l8-.7c34.1-2.8 64.2-18.9 85.4-42.9c21.2 24 51.2 40 85.4 42.9l8 .7c17.6 1.5 33.1-11.6 34.5-29.2s-11.6-33.1-29.2-34.5l-8-.7C185.5 444.7 160 417 160 383.7l0-95.7 32 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-32 0 0-95.7c0-33.3 25.5-61 58.7-63.8l8-.7c17.6-1.5 30.7-16.9 29.2-34.5S239-1.4 221.3 .1l-8 .7C179.2 3.6 149.2 19.7 128 43.7c-21.2-24-51.2-40-85.4-42.9l-8-.7C17-1.4 1.6 11.7 .1 29.3z"/></svg>  
                  </button>
                  <button title="Rename Description for ${updatedProject.name}" class="btn-rename-description">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                      <path d="M290.74 93.24a32 32 0 0 0-45.25 0l-224 224a32 32 0 0 0-8.19 13.7L.06 482.3a16 16 0 0 0 19.64 19.64l151.36-13.24a32 32 0 0 0 13.7-8.19l224-224a32 32 0 0 0 0-45.25ZM124.12 422.06l-92.18 8.06 8.06-92.18 176-176 84.12 84.12ZM478.33 33.67a96 96 0 0 0-135.66 0l-56.56 56.56 135.66 135.66 56.56-56.56a96 96 0 0 0 0-135.66ZM403.88 108.12l-84.12-84.12 33.94-33.94a64 64 0 0 1 90.5 90.5Z"/>
                    </svg>
                  </button>
                  <button title="Duplicate ${updatedProject.name}" class="btn-duplicate">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M288 448L64 448l0-224 64 0 0-64-64 0c-35.3 0-64 28.7-64 64L0 448c0 35.3 28.7 64 64 64l224 0c35.3 0 64-28.7 64-64l0-64-64 0 0 64zm-64-96l224 0c35.3 0 64-28.7 64-64l0-224c0-35.3-28.7-64-64-64L224 0c-35.3 0-64 28.7-64 64l0 224c0 35.3 28.7 64 64 64z"/></svg>
                  </button>
                  <button title="Delete ${updatedProject.name}" class="btn-delete">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M135.2 17.7L128 32 32 32C14.3 32 0 46.3 0 64S14.3 96 32 96l384 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-96 0-7.2-14.3C307.4 6.8 296.3 0 284.2 0L163.8 0c-12.1 0-23.2 6.8-28.6 17.7zM416 128L32 128 53.2 467c1.6 25.3 22.6 45 47.9 45l245.8 0c25.3 0 46.3-19.7 47.9-45L416 128z"/></svg>
                  </button>
                </div>
        
                <div class="delete-confirmation">
                  <p>Confirm?</p>
                    <button title="Cancel Deletion" class="btn-delete-cancel">
                      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M367.2 412.5L99.5 144.8C77.1 176.1 64 214.5 64 256c0 106 86 192 192 192c41.5 0 79.9-13.1 111.2-35.5zm45.3-45.3C434.9 335.9 448 297.5 448 256c0-106-86-192-192-192c-41.5 0-79.9 13.1-111.2 35.5L412.5 367.2zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256z"/></svg>
                    </button>
                </div>
              </div>
            `;
            
            // Add event listeners for the new card (similar to the existing ones)
            newCard.onclick = () => {
              localStorage.setItem('projectId', updatedProject._id);
              const windowIframe = window.parent.document.getElementById('window');
              windowIframe.src = 'components/window/window.html';
            };

            project_gallery.appendChild(newCard);
            showNotification(`Project "${updatedProject.name}" duplicated successfully.`, 'success');
            if (window.top.DEBUG) console.log(`‚úÖ [4] Project "${updatedProject.name}" duplicated successfully.`);
          }
        } else {
          throw new Error('Failed to duplicate project.');
        }
      } catch (error) {
        if (window.top.DEBUG) console.error("Error duplicating project:", error);
        showNotification("Couldn't duplicate project. Please try again.");
      }
    });

    async function duplicateChild(childId, newParentId) {
      try {
        if (!childId || !newParentId) {
          if (window.top.DEBUG) console.error("Invalid childId or newParentId. Skipping duplication.");
          return null;
        }
    
        // Fetch the child document
        const child = await window.top.db.get(childId);
    
        // Validate child data
        if (!child || !child.type) {
          if (window.top.DEBUG) console.error(`Invalid child data for ID "${childId}". Skipping duplication. Data:`, child);
          return null;
        }
    
        // Create a copy of the child with a new ID and updated parentId
        const { _id, _rev, ...childData } = child; // Exclude _id and _rev
        const newChild = {
          ...childData,
          parentId: newParentId, // Associate the child with the new parent project
          date: {
            created: new Date(),
            last: new Date()
          }
        };
    
        // Handle specific fileType values
        if (child.fileType === 'nodeGraph' || child.fileType === 'relationship') {
          const { modules, changes, ...rest } = childData;
          newChild.modules = [...modules]; // Duplicate modules
          newChild.changes = [...changes]; // Duplicate changes
        }
    
        // Save the new child to the database
        const response = await window.top.db.post(newChild);
        if (response.ok) {
          const newChildId = response.id; // Get the new child's ID
          if (window.top.DEBUG) console.log(`‚úÖ [4] Child "${child.fileType}" duplicated successfully with new ID "${newChildId}". Data:`, newChild);
    
          // Recursively duplicate the child's children if it is a folder
          if (child.type === 'folder' && Array.isArray(child.childrenIds) && child.childrenIds.length > 0) {
            const newGrandChildrenIds = [];
            for (const grandChildId of child.childrenIds) {
              if (grandChildId) { // Ensure grandChildId is not null or undefined
                const newGrandChildId = await duplicateChild(grandChildId, newChildId);
                if (newGrandChildId) {
                  newGrandChildrenIds.push(newGrandChildId);
                }
              }
            }
    
            // Update the new folder's childrenIds
            const latestNewChild = await window.top.db.get(newChildId); // Fetch the latest version of the new folder
            const updatedChild = {
              ...latestNewChild, // Include the latest _rev
              childrenIds: newGrandChildrenIds
            };
            await window.top.db.put(updatedChild); // Save the updated folder
          }
    
          return newChildId; // Return the new child's ID
        } else {
          throw new Error(`Failed to duplicate child "${child.fileType}".`);
        }
      } catch (error) {
        if (window.top.DEBUG) console.error(`Error duplicating child with ID "${childId}":`, error);
        return null;
      }
    }

    // Delete
    let state = 'closed';
    deleteButton.addEventListener('click', async (event) => {
      if (state === 'closed') {
        deleteButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M119.4 44.1c23.3-3.9 46.8-1.9 68.6 5.3l49.8 77.5-75.4 75.4c-1.5 1.5-2.4 3.6-2.3 5.8s1 4.2 2.6 5.7l112 104c2.9 2.7 7.4 2.9 10.5 .3s3.8-7 1.7-10.4l-60.4-98.1 90.7-75.6c2.6-2.1 3.5-5.7 2.4-8.8L296.8 61.8c28.5-16.7 62.4-23.2 95.7-17.6C461.5 55.6 512 115.2 512 185.1l0 5.8c0 41.5-17.2 81.2-47.6 109.5L283.7 469.1c-7.5 7-17.4 10.9-27.7 10.9s-20.2-3.9-27.7-10.9L47.6 300.4C17.2 272.1 0 232.4 0 190.9l0-5.8c0-69.9 50.5-129.5 119.4-141z"/></svg>';
        dropButtons([openButton, infoButton, renameButton, duplicateButton, changeImageButton, renameDescriptionButton], '2.5rem')
        confirmation.style.transform = 'translateY(-2rem)';
        state = 'open';
        deleteButton.classList.add('active');
      } else {
        if (window.top.DEBUG) console.log(`üõ† [2] Deleting project "${project.name}"...`);
          window.top.db.remove(project._id)
          .then(() => {
              // TODO: Recursively delete all nested files and folders
              if (window.top.DEBUG) console.log(`‚úÖ [2] Project "${project.name}" deleted.`);
              card.remove();
              showNotification(`Project "${project.name}" deleted successfully.`, 'success');
//              location.reload();
            })
          .catch(error => {
            if (window.top.DEBUG) console.log("‚ùå [2] Couldn't delete project:", error);
            window.top.notify('error', "Couldn't delete project");
          });
      }
    })

    // Cancel Delete
    card.querySelector('.btn-delete-cancel').addEventListener('click', async (event) => {
      deleteButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M135.2 17.7L128 32 32 32C14.3 32 0 46.3 0 64S14.3 96 32 96l384 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-96 0-7.2-14.3C307.4 6.8 296.3 0 284.2 0L163.8 0c-12.1 0-23.2 6.8-28.6 17.7zM416 128L32 128 53.2 467c1.6 25.3 22.6 45 47.9 45l245.8 0c25.3 0 46.3-19.7 47.9-45L416 128z"/></svg>'
      dropButtons([])
      unDropButtons([openButton, infoButton, renameButton, duplicateButton, changeImageButton, renameDescriptionButton])
      confirmation.style.transform = 'translateY(0rem)';
      state = 'closed';
      deleteButton.classList.remove('active');
    });

    // Close delete confirmation
    card.addEventListener('mouseleave', async (event) => {
      deleteButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M135.2 17.7L128 32 32 32C14.3 32 0 46.3 0 64S14.3 96 32 96l384 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-96 0-7.2-14.3C307.4 6.8 296.3 0 284.2 0L163.8 0c-12.1 0-23.2 6.8-28.6 17.7zM416 128L32 128 53.2 467c1.6 25.3 22.6 45 47.9 45l245.8 0c25.3 0 46.3-19.7 47.9-45L416 128z"/></svg>'
      dropButtons([])
      unDropButtons([openButton, infoButton, renameButton, duplicateButton, changeImageButton, renameDescriptionButton])
      confirmation.style.transform = 'translateY(0rem)';
      state = 'closed';
      deleteButton.classList.remove('active');
    })
  };

  // Add hover event listener to populate the dropdown
  const dropdownButton = document.querySelector(".dropbtn");
  dropdownButton.addEventListener("mouseover", () => populateProjectDropdown(projects));
}

initProjects();
