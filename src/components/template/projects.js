// const projects = [
//     {id: 1, title: 'Project 1', description:'Short Story Project'},
//     {id: 2, title: 'Project 2', description:'Novella Project'},
//     {id: 3, title: 'Project 3', description:'Horror mini-series Project'},
//     {id: 4, title: 'Project 4', description:'15-book series Project'}
// ];

async function unnecessaryAsyncFunctionBecauseJavaScriptIsALittleBitchAndDoesntLikeAsyncCallsOutsideOfFunctions() {
  const date = new Date();
  let projects = [];

  const projectTemplate = {                 // There is no id. It is automatically generated by PouchDB. This will be each related child's projectId.
    name: "NewWorldMain",                   // Name of the project. This will also be the name of the root folder.
    type: "folder",                         // Root projects are always folders. Children must be either folders or files.
    parentId: null,                         // Project roots have no parent. All related children must have a parent.
    image: "dog.jpg",                       // Just the name and extension of the image. ../../assets/images/'image' is already included when getting path.
    description: "This is a test project",  // Description of the project that is shown on the project list.
    childrenIds: [                          // Immediate children of the root project.
      "file1-0987654321",
      "Characters-1234123412"
    ],
    date: {                                 
      created: date,                        // Date when the project was created.
      last: date                            // Date when the project was last updated.
    }
  }
  
  window.top.db.createIndex({
    index: {
      fields: ['parentId', 'type']
    }
  })
  
  console.log('🛠 [1] Fetching projects...');
  projects = await window.top.db.find({
    selector: {
      parentId: null,
      type: 'folder'
    }
  })
  .then(result => {
    console.log(`✅ [1] Fetched ${result.length} project${result.length === 1 ? '' : 's'}:`, result);
    return result;
  })
  .catch(error => {
    console.log("❌ [1] Couldn't fetch projects:", error);
  })

  const project_gallery = document.getElementById('projectGallery');

  projects.forEach(project => {
    const card = document.createElement('div');
    card.className = 'project-card';
    card.innerHTML = `
      <div class="template-image" style="background-image: url('../../assets/images/${project.image}');"></div>
      <div class="template-title">${project.name}</div>
      <div class="template-description">${project.description}</div>
    `;
    card.onclick = () => {
      const windowIframe = window.parent.document.getElementById('window');
      windowIframe.src = 'components/window/window.html';
      // This is where the generateTree function will be called to create the hierarchy.
      // WAIT nvm, just going to set a value on something and when the iframe changes, hierarchy.js will start and can grab that value to generate the hierarchy.
      // Leaving this here for now. Taking a break. Ill come back to it later.
    };
    project_gallery.appendChild(card);
  });
}

unnecessaryAsyncFunctionBecauseJavaScriptIsALittleBitchAndDoesntLikeAsyncCallsOutsideOfFunctions();
